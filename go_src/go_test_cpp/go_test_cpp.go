/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ./go_test_cpp.swigcxx

package go_test_cpp

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
extern void _wrap_Swig_free_go_test_cpp_c1abd8f59e493613(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_go_test_cpp_c1abd8f59e493613(swig_intgo arg1);
extern uintptr_t _wrap__swig_NewDirectorICallbackICallback_go_test_cpp_c1abd8f59e493613(int);
extern void _wrap_ICallback_notify_go_test_cpp_c1abd8f59e493613(uintptr_t arg1, swig_type_1 arg2);
extern void _wrap_delete_ICallback_go_test_cpp_c1abd8f59e493613(uintptr_t arg1);
extern uintptr_t _wrap_TestCall_Create_go_test_cpp_c1abd8f59e493613(void);
extern void _wrap_TestCall_SetCallback_go_test_cpp_c1abd8f59e493613(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_TestCall_Test_go_test_cpp_c1abd8f59e493613(uintptr_t arg1, swig_type_2 arg2);
extern uintptr_t _wrap_TestCall_add_go_test_cpp_c1abd8f59e493613(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern void _wrap_delete_TestCall_go_test_cpp_c1abd8f59e493613(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_go_test_cpp_c1abd8f59e493613(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type _swig_DirectorICallback struct {
	SwigcptrICallback
	v interface{}
}

func (p *_swig_DirectorICallback) Swigcptr() uintptr {
	return p.SwigcptrICallback.Swigcptr()
}

func (p *_swig_DirectorICallback) SwigIsICallback() {
}

func (p *_swig_DirectorICallback) DirectorInterface() interface{} {
	return p.v
}

func NewDirectorICallback(v interface{}) ICallback {
	p := &_swig_DirectorICallback{0, v}
	p.SwigcptrICallback = SwigcptrICallback(C._wrap__swig_NewDirectorICallbackICallback_go_test_cpp_c1abd8f59e493613(C.int(swigDirectorAdd(p))))
	return p
}

type _swig_DirectorInterfaceICallbackNotify interface {
	Notify(string)
}

func (swig_p *_swig_DirectorICallback) Notify(s string) {
	if swig_g, swig_ok := swig_p.v.(_swig_DirectorInterfaceICallbackNotify); swig_ok {
		swig_g.Notify(s)
		return
	}
	panic("call to pure virtual method")
}

//export Swig_DirectorICallback_callback_notify_go_test_cpp_c1abd8f59e493613
func Swig_DirectorICallback_callback_notify_go_test_cpp_c1abd8f59e493613(swig_c int, s string) {
	var _swig_i_0 string
	swig_p := swigDirectorLookup(swig_c).(*_swig_DirectorICallback)
 _swig_i_0 = swigCopyString(s) 
	swig_p.Notify(_swig_i_0)
}

type SwigcptrICallback uintptr

func (p SwigcptrICallback) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrICallback) SwigIsICallback() {
}

func (p SwigcptrICallback) DirectorInterface() interface{} {
	return nil
}

func (arg1 SwigcptrICallback) Notify(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_ICallback_notify_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func DeleteICallback(arg1 ICallback) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_ICallback_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0))
}

type ICallback interface {
	Swigcptr() uintptr
	SwigIsICallback()
	DirectorInterface() interface{}
	Notify(arg2 string)
}

type SwigcptrTestCall uintptr

func (p SwigcptrTestCall) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrTestCall) SwigIsTestCall() {
}

func TestCallCreate() (_swig_ret TestCall) {
	var swig_r TestCall
	swig_r = (TestCall)(SwigcptrTestCall(C._wrap_TestCall_Create_go_test_cpp_c1abd8f59e493613()))
	return swig_r
}

func (arg1 SwigcptrTestCall) SetCallback(arg2 ICallback) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_TestCall_SetCallback_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func (arg1 SwigcptrTestCall) Test(arg2 string) (_swig_ret Int32_t) {
	var swig_r Int32_t
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (Int32_t)(SwigcptrInt32_t(C._wrap_TestCall_Test_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrTestCall) Add(arg2 Uint32_t, arg3 Uint32_t) (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_TestCall_add_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2))))
	return swig_r
}

func DeleteTestCall(arg1 TestCall) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_TestCall_go_test_cpp_c1abd8f59e493613(C.uintptr_t(_swig_i_0))
}

type TestCall interface {
	Swigcptr() uintptr
	SwigIsTestCall()
	SetCallback(arg2 ICallback)
	Test(arg2 string) (_swig_ret Int32_t)
	Add(arg2 Uint32_t, arg3 Uint32_t) (_swig_ret Uint32_t)
}


type SwigcptrInt32_t uintptr
type Int32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrInt32_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint32_t uintptr
type Uint32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint32_t) Swigcptr() uintptr {
	return uintptr(p)
}



var swigDirectorTrack struct {
	sync.Mutex
	m map[int]interface{}
	c int
}

func swigDirectorAdd(v interface{}) int {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m == nil {
		swigDirectorTrack.m = make(map[int]interface{})
	}
	swigDirectorTrack.c++
	ret := swigDirectorTrack.c
	swigDirectorTrack.m[ret] = v
	return ret
}

func swigDirectorLookup(c int) interface{} {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	ret := swigDirectorTrack.m[c]
	if ret == nil {
		panic("C++ director pointer not found (possible	use-after-free)")
	}
	return ret
}

func swigDirectorDelete(c int) {
	swigDirectorTrack.Lock()
	defer swigDirectorTrack.Unlock()
	if swigDirectorTrack.m[c] == nil {
		if c > swigDirectorTrack.c {
			panic("C++ director pointer invalid (possible memory corruption")
		} else {
			panic("C++ director pointer not found (possible use-after-free)")
		}
	}
	delete(swigDirectorTrack.m, c)
}


